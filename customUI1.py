import wx,osimport maxentevaluator,naivebayesevaluatorimport extract_dataimport pie_chartclass ExamplePanel(wx.Panel):    def __init__(self, parent):        wx.Panel.__init__(self, parent)        self.isBrowsedDataset=False        self.logger1 = wx.TextCtrl(self, pos=(20,180), size=(1200,580), style=wx.TE_MULTILINE | wx.TE_READONLY)        #self.logger2 = wx.TextCtrl(self, pos=(620,180), size=(600,580), style=wx.TE_MULTILINE | wx.TE_READONLY)        # Search Query Text Control        self.search_quote = wx.StaticText(self, label="Search:", pos=(20, 30))        self.editname = wx.TextCtrl(self, value="Query?", pos=(20, 50), size=(340,-1))         # Check button        self.check_button =wx.Button(self, label="Check", pos=(370, 49))        self.Bind(wx.EVT_BUTTON, self.onClick_check,self.check_button)        # Classifier Type Radio Buttons        radioList = ['Max Entropy','Naive Bayes']        self.rb = wx.RadioBox(self, label="Classifier Type", pos=(20, 90), choices=radioList,  majorDimension=3,                         style=wx.RA_SPECIFY_COLS)        self.st = wx.StaticText(self,label="Classification Option", pos=(500,90))        dropdownList = ['Without Star Rating','With Star Rating']        self.dd = wx.ComboBox(self, value=dropdownList[0], pos=(500, 110), choices=dropdownList,                         style=wx.CB_DROPDOWN)    def onClick_check(self,event):        self.logger1.Clear()        #self.logger2.Clear()        query_string=self.editname.GetValue()        classifier_type=self.rb.GetSelection()        Option = self.dd.GetValue()        print Option        self.logger1.AppendText("Query = \'"+query_string+"\'\n")        if(query_string=="Query?" or query_string.strip()==""):            self.logger1.AppendText("Empty Query term, Enter the Text!\n")        #self.logger2.AppendText("Query = \'"+query_string+"\'\n")        elif classifier_type==1:            self.logger1.AppendText("Classifier type = Naive Bayes\n")            result=naivebayesevaluator.main(1)            reviews = extract_data.get(query_string,0)            bw=extract_data.best_worst_reviews(query_string)            print bw[0],'\n',bw[1]            if(reviews[0]+reviews[1]==0):            	dlg = wx.MessageDialog(None, 'Item not found', 'Error', wx.OK | wx.ICON_EXCLAMATION)            	result = dlg.ShowModal()           	    #self.logger1.AppendText("Item no found!\n")            else:		            self.logger1.AppendText("\n"+result[0])	            self.logger1.AppendText("\nAccuracy for Positives: %.2f%%" % result[1])	            self.logger1.AppendText("\nAccuracy for Negatives: %.2f%%" % result[2])	            self.logger1.AppendText("\nAccuracy for (Positives|Negatives): %.2f%%" % result[3])	            self.logger1.AppendText("\nCorrelation for (Positives|Negatives): %.2f%%" % result[4])	            self.logger1.AppendText("\n\n")	            if Option == "Without Star Rating":	                self.logger1.AppendText("Positives: " + str(reviews[0])+" ("+str(reviews[2])+"%)")	                self.logger1.AppendText("\nNegatives: " + str(reviews[1])+" ("+str(reviews[3])+"%)")	                self.logger1.AppendText("\n\n")	                self.logger1.AppendText("\nMost Positive Review: "+bw[0] +"\nMost Negative Review: "+bw[1])	                for tweet in reviews[5]:	                    self.logger1.AppendText(tweet[1]+"\n\n")	                pie_chart.draw_pie_chart1(reviews)	            if Option == "With Star Rating":	                self.logger1.AppendText("Changed to Positives: " + str(reviews[6])+" ("+str(reviews[8])+"%)")	                self.logger1.AppendText("\nChanged to Negatives: " + str(reviews[7])+" ("+str(reviews[9])+"%)")	                self.logger1.AppendText("\nChanged to Neutrals: " + str(reviews[11])+" ("+str(reviews[12])+"%)")	                self.logger1.AppendText("\nMost Positive Review: "+bw[0] +"\nMost Negative Review: "+bw[1])	                self.logger1.AppendText("\n\n")	                for tweet in reviews[10]:	                    self.logger1.AppendText(tweet[1]+"\n\n")	                pie_chart.draw_pie_chart2(reviews)                elif classifier_type==0:            self.logger1.AppendText("Classifier type = Max Entropy\n")            # self.logger2.AppendText("Classifier type = Max Entropy\n")            result=maxentevaluator.main()            reviews = extract_data.get(query_string,1)            bw=extract_data.best_worst_reviews(query_string)            print bw[0],'\n',bw[1]            if(reviews[0]+reviews[1]==0):                dlg = wx.MessageDialog(None, 'Item not found', 'Error', wx.OK | wx.ICON_EXCLAMATION)                result = dlg.ShowModal()                #self.logger1.AppendText("Item not found!\n")            else:	            self.logger1.AppendText("\n"+result[0])	            self.logger1.AppendText("\nAccuracy for Positives: %.2f%%" % result[1])	            self.logger1.AppendText("\nAccuracy for Negatives: %.2f%%" % result[2])	            self.logger1.AppendText("\nAccuracy for (Positives|Negatives): %.2f%%" % result[3])	            self.logger1.AppendText("\nCorrelation for (Positives|Negatives): %.2f%%" % result[4])	            self.logger1.AppendText("\n\n")	            	            	            if Option == "Without Star Rating":	                self.logger1.AppendText("Positives: " + str(reviews[0])+" ("+str(reviews[2])+"%)")	                self.logger1.AppendText("\nNegatives: " + str(reviews[1])+" ("+str(reviews[3])+"%)")	                self.logger1.AppendText("\n\nMost Positive Review : \n\n"+bw[0] +"\n\nMost Negative Review : \n\n"+bw[1] +"\n\n ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n")	                self.logger1.AppendText("\n\n")	                for tweet in reviews[5]:	                    self.logger1.AppendText(tweet[1]+"\n\n")	                pie_chart.draw_pie_chart1(reviews)	            if Option == "With Star Rating":	                self.logger1.AppendText("Changed to Positives: " + str(reviews[6])+" ("+str(reviews[8])+"%)")	                self.logger1.AppendText("\nChanged to Negatives: " + str(reviews[7])+" ("+str(reviews[9])+"%)")	                self.logger1.AppendText("\nChanged to Neutrals: " + str(reviews[11])+" ("+str(reviews[12])+"%)")  	                self.logger1.AppendText("\n\nMost Positive Review : \n\n"+bw[0] +"\n\nMost Negative Review : \n\n"+bw[1] + "\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n")	                self.logger1.AppendText("\n\n")	                for tweet in reviews[10]:	                    self.logger1.AppendText(tweet[1]+"\n\n")	                pie_chart.draw_pie_chart2(reviews)    app = wx.App(False)frame = wx.Frame(None,wx.ID_ANY, "SentimentAnalysis",size=(1290,700))panel = ExamplePanel(frame)frame.Show()app.MainLoop()